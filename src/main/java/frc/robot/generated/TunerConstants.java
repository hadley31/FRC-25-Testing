package frc.robot.generated;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.CANcoderConfiguration;
import com.ctre.phoenix6.configs.CurrentLimitsConfigs;
import com.ctre.phoenix6.configs.Pigeon2Configuration;
import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.swerve.SwerveDrivetrain;
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.ClosedLoopOutputType;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory;

import edu.wpi.first.units.Units;
import edu.wpi.first.units.measure.Angle;
import edu.wpi.first.units.measure.Current;
import edu.wpi.first.units.measure.Distance;
import edu.wpi.first.units.measure.LinearVelocity;
import edu.wpi.first.units.measure.Voltage;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
  // Both sets of gains need to be tuned to your individual robot.

  // The steer motor uses any SwerveModule.SteerReques tType control request with the
  // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
  private static final Slot0Configs steerGains = new Slot0Configs()
      .withKP(100).withKI(0).withKD(2.0)
      .withKS(0.2).withKV(1.5).withKA(0);
  // When using closed-loop control, the drive motor uses the control
  // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
  private static final Slot0Configs driveGains = new Slot0Configs()
      .withKP(0.1).withKI(0).withKD(0)
      .withKS(0.05).withKV(.12).withKA(0);

  // The closed-loop output type to use for the steer motors;
  // This affects the PID/FF gains for the steer motors
  private static final ClosedLoopOutputType kSteerClosedLoopOutput = ClosedLoopOutputType.Voltage;
  // The closed-loop output type to use for the drive motors;
  // This affects the PID/FF gains for the drive motors
  private static final ClosedLoopOutputType kDriveClosedLoopOutput = ClosedLoopOutputType.Voltage;
  // The remote sensor feedback type to use for the steer motors;
  // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
  private static final SteerFeedbackType kSteerFeedbackType = SteerFeedbackType.FusedCANcoder;

  // The stator current at which the wheels start to slip;
  // This needs to be tuned to your individual robot
  private static final Current kSlipCurrent = Units.Amps.of(120.0);

  // Initial configs for the drive and steer motors and the CANcoder; these cannot be null.
  // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
  private static final TalonFXConfiguration driveInitialConfigs = new TalonFXConfiguration();
  private static final TalonFXConfiguration steerInitialConfigs = new TalonFXConfiguration()
      .withCurrentLimits(
          new CurrentLimitsConfigs()
              // Swerve azimuth does not require much torque output, so we can set a relatively low
              // stator current limit to help avoid brownouts without impacting performance.
              .withStatorCurrentLimit(Units.Amps.of(60))
              .withStatorCurrentLimitEnable(true));
  private static final CANcoderConfiguration cancoderInitialConfigs = new CANcoderConfiguration();
  // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
  private static final Pigeon2Configuration pigeonConfigs = null;

  // Theoretical free speed (m/s) at 12 V applied output;
  // This needs to be tuned to your individual robot
  public static final LinearVelocity kSpeedAt12Volts = Units.MetersPerSecond.of(4.70);

  // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
  // This may need to be tuned to your individual robot
  private static final double kCoupleRatio = 3.5714285714285716;

  private static final double kDriveGearRatio = 6.746031746031747;
  private static final double kSteerGearRatio = 21.428571428571427;
  private static final Distance kWheelRadius = Units.Inches.of(2.167);

  private static final boolean kInvertLeftSide = false;
  private static final boolean kInvertRightSide = true;

  private static final CANBus kCANBus = new CANBus("CanVan", "./logs/example.hoot");
  private static final int kPigeonId = 13;

  // These are only used for simulation
  private static final double kSteerInertia = 0.01;
  private static final double kDriveInertia = 0.01;
  // Simulated voltage necessary to overcome friction
  private static final Voltage kSteerFrictionVoltage = Units.Volts.of(0.25);
  private static final Voltage kDriveFrictionVoltage = Units.Volts.of(0.25);

  public static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
      .withCANBusName(kCANBus.getName())
      .withPigeon2Id(kPigeonId)
      .withPigeon2Configs(pigeonConfigs);

  private static final SwerveModuleConstantsFactory ConstantCreator = new SwerveModuleConstantsFactory()
      .withDriveMotorGearRatio(kDriveGearRatio)
      .withSteerMotorGearRatio(kSteerGearRatio)
      .withCouplingGearRatio(kCoupleRatio)
      .withWheelRadius(kWheelRadius)
      .withSteerMotorGains(steerGains)
      .withDriveMotorGains(driveGains)
      .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
      .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
      .withSlipCurrent(kSlipCurrent)
      .withSpeedAt12Volts(kSpeedAt12Volts)
      .withFeedbackSource(kSteerFeedbackType)
      .withDriveMotorInitialConfigs(driveInitialConfigs)
      .withSteerMotorInitialConfigs(steerInitialConfigs)
      .withCANcoderInitialConfigs(cancoderInitialConfigs)
      .withSteerInertia(kSteerInertia)
      .withDriveInertia(kDriveInertia)
      .withSteerFrictionVoltage(kSteerFrictionVoltage)
      .withDriveFrictionVoltage(kDriveFrictionVoltage);

  // Front Left
  private static final int kFrontLeftDriveMotorId = 4;
  private static final int kFrontLeftSteerMotorId = 5;
  private static final int kFrontLeftEncoderId = 11;
  private static final Angle kFrontLeftEncoderOffset = Units.Rotations.of(0.47119140625 - 0.5);
  private static final boolean kFrontLeftSteerMotorInverted = true;

  private static final Distance kFrontLeftXPosInches = Units.Inches.of(9.375);
  private static final Distance kFrontLeftYPosInches = Units.Inches.of(9.375);

  // Front Right
  private static final int kFrontRightDriveMotorId = 6;
  private static final int kFrontRightSteerMotorId = 8;
  private static final int kFrontRightEncoderId = 9;
  private static final Angle kFrontRightEncoderOffset = Units.Rotations.of(-0.07861328125 - 0.5);
  private static final boolean kFrontRightSteerMotorInverted = true;

  private static final Distance kFrontRightXPosInches = Units.Inches.of(9.375);
  private static final Distance kFrontRightYPosInches = Units.Inches.of(-9.375);

  // Back Left
  private static final int kBackLeftDriveMotorId = 7;
  private static final int kBackLeftSteerMotorId = 2;
  private static final int kBackLeftEncoderId = 10;
  private static final Angle kBackLeftEncoderOffset = Units.Rotations.of(-0.110595703125);
  private static final boolean kBackLeftSteerMotorInverted = true;

  private static final Distance kBackLeftXPosInches = Units.Inches.of(-9.375);
  private static final Distance kBackLeftYPosInches = Units.Inches.of(9.375);

  // Back Right
  private static final int kBackRightDriveMotorId = 1;
  private static final int kBackRightSteerMotorId = 3;
  private static final int kBackRightEncoderId = 12;
  private static final Angle kBackRightEncoderOffset = Units.Rotations.of(-0.163330078125 - 0.5);
  private static final boolean kBackRightSteerMotorInverted = true;

  private static final Distance kBackRightXPosInches = Units.Inches.of(-9.375);
  private static final Distance kBackRightYPosInches = Units.Inches.of(-9.375);

  private static final SwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
      kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset,
      kFrontLeftXPosInches, kFrontLeftYPosInches, kInvertLeftSide, kFrontLeftSteerMotorInverted);
  private static final SwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
      kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId, kFrontRightEncoderOffset,
      kFrontRightXPosInches, kFrontRightYPosInches, kInvertRightSide,
      kFrontRightSteerMotorInverted);
  private static final SwerveModuleConstants BackLeft = ConstantCreator.createModuleConstants(
      kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset,
      kBackLeftXPosInches, kBackLeftYPosInches, kInvertLeftSide,
      kBackLeftSteerMotorInverted);
  private static final SwerveModuleConstants BackRight = ConstantCreator.createModuleConstants(
      kBackRightSteerMotorId, kBackRightDriveMotorId, kBackRightEncoderId, kBackRightEncoderOffset,
      kBackRightXPosInches, kBackRightYPosInches, kInvertRightSide,
      kBackRightSteerMotorInverted);

  public static final SwerveDrivetrain DriveTrain = new SwerveDrivetrain(DrivetrainConstants, FrontLeft,
      FrontRight, BackLeft, BackRight);
}
